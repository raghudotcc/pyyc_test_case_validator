
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSrightUMINUSAND CLASS COLON COMMA DEDENT DEF ELSE EQ EQUALS FALSE IF INDENT IS LAMBDA LBRACE LBRACKET LPAREN MINUS NEWLINE NOT NOT_EQ OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TRUE WHILE WHITESPACE identifier integer\n    module : statements\n    \n    statements : statements statement\n               | statement\n    \n    statement : stmt_list NEWLINE\n              | compound_stmt\n    \n    stmt_list : stmt_list SEMICOLON simple_stmt\n             | simple_stmt\n    \n    simple_stmt : expression_stmt\n                | assignment_stmt\n                | return_stmt\n    \n    compound_stmt : if_stmt\n                  | while_stmt\n                  | funcdef\n                  | classdef\n    \n    expression_stmt : expression\n    \n    assignment_stmt : target_list EQUALS expression\n    \n    target_list : target\n    \n    target : identifier\n          | LPAREN target_list RPAREN\n          | LBRACKET target_list RBRACKET\n          | subscription\n    \n    return_stmt : RETURN expression_list\n    \n    if_stmt : IF expression COLON suite\n           | IF expression COLON suite ELSE COLON suite\n    \n    while_stmt : WHILE expression COLON suite\n    \n    funcdef : DEF funcname LPAREN parameter_list RPAREN COLON suite\n    \n    parameter_list : parameter_list COLON parameter \n                    | parameter \n                    | empty\n    \n    parameter : identifier\n    \n    funcname : identifier\n    \n    suite : stmt_list NEWLINE\n         | NEWLINE INDENT statements DEDENT\n    \n    classdef : CLASS classname COLON suite\n    \n    classname : identifier\n    \n    atom : identifier\n         | literal\n         | enclosure\n    \n    enclosure : parenth_form\n              | list_display\n              | dict_display\n    \n    parenth_form : LPAREN starred_expression RPAREN\n    \n    starred_expression : expression\n                       | starred_expression COLON expression\n    \n    list_display : LBRACKET expression_list RBRACKET\n    \n    dict_display : LBRACE key_datum_list RBRACE\n    \n    key_datum_list : key_datum_list COMMA key_datum\n                   | key_datum\n                   | empty\n    \n    key_datum : expression COLON expression\n    \n    literal : integer \n            | TRUE \n            | FALSE\n    \n    primary : atom\n            | subscription\n            | call\n    \n    subscription : primary LBRACKET expression_list RBRACKET\n    \n    call : primary LPAREN argument_list RPAREN\n    \n    argument_list : positional_arguments\n    \n    positional_arguments : positional_arguments COMMA positional_item\n                         | positional_item\n                         | empty\n    \n    positional_item : expression\n    \n    expression_list : expression_list COMMA expression\n                    | expression\n                    | empty\n    \n    expression : conditional_expression\n                | lambda_expr\n    \n    conditional_expression : or_test\n                            | or_test IF or_test ELSE expression\n    \n    lambda_expr : LAMBDA parameter_list COLON expression\n    \n    or_test : and_test\n            | or_test OR and_test\n    \n    and_test : not_test \n             | and_test AND not_test\n    \n    not_test : NOT not_test\n             | comparison\n    \n    comparison : a_expr \n               | comparison comp_operator a_expr\n    \n    comp_operator : EQ\n                  | NOT_EQ\n                  | IS\n    \n    a_expr : a_expr PLUS u_expr\n            | u_expr\n    \n    u_expr : primary\n           | MINUS primary %prec UMINUS\n    \n    empty :\n    '
    
_lr_action_items = {'IF':([0,2,3,5,7,8,9,10,25,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,49,50,53,54,55,81,91,97,103,106,107,114,115,116,119,122,125,130,131,132,137,138,144,146,147,148,],[14,14,-3,-5,-11,-12,-13,-14,70,-36,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-2,-4,-85,-55,-36,-76,-86,-42,-73,-45,-75,-79,-83,-46,-23,-25,-34,-36,-57,-58,-32,14,14,-24,-33,-26,]),'WHILE':([0,2,3,5,7,8,9,10,49,50,119,122,125,137,138,144,146,147,148,],[16,16,-3,-5,-11,-12,-13,-14,-2,-4,-23,-25,-34,-32,16,16,-24,-33,-26,]),'DEF':([0,2,3,5,7,8,9,10,49,50,119,122,125,137,138,144,146,147,148,],[17,17,-3,-5,-11,-12,-13,-14,-2,-4,-23,-25,-34,-32,17,17,-24,-33,-26,]),'CLASS':([0,2,3,5,7,8,9,10,49,50,119,122,125,137,138,144,146,147,148,],[19,19,-3,-5,-11,-12,-13,-14,-2,-4,-23,-25,-34,-32,19,19,-24,-33,-26,]),'RETURN':([0,2,3,5,7,8,9,10,49,50,51,93,94,99,119,122,125,137,138,143,144,145,146,147,148,],[21,21,-3,-5,-11,-12,-13,-14,-2,-4,21,21,21,21,-23,-25,-34,-32,21,21,21,21,-24,-33,-26,]),'LAMBDA':([0,2,3,5,7,8,9,10,14,16,18,21,28,47,49,50,51,56,57,66,79,80,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[26,26,-3,-5,-11,-12,-13,-14,26,26,26,26,26,26,-2,-4,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-23,-25,-34,26,26,-32,26,26,26,26,-24,-33,-26,]),'identifier':([0,2,3,5,7,8,9,10,14,16,17,18,19,21,26,28,35,47,48,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,95,98,99,101,104,117,118,119,122,125,127,133,137,138,140,143,144,145,146,147,148,],[27,27,-3,-5,-11,-12,-13,-14,55,55,60,27,65,55,75,27,55,55,55,-2,-4,27,55,55,55,55,55,55,55,55,55,-80,-81,-82,55,27,27,75,55,27,55,130,55,55,-23,-25,-34,55,55,-32,27,75,27,27,27,-24,-33,-26,]),'LPAREN':([0,2,3,5,7,8,9,10,14,16,18,21,27,28,29,31,33,34,35,37,38,40,41,42,43,44,45,47,48,49,50,51,53,54,55,56,57,59,60,66,70,71,78,79,80,82,83,84,85,86,91,93,94,97,98,99,101,104,106,116,117,118,119,122,125,127,130,131,132,133,137,138,143,144,145,146,147,148,],[18,18,-3,-5,-11,-12,-13,-14,57,57,18,57,-36,18,-55,80,-54,-56,57,-37,-38,-51,-52,-53,-39,-40,-41,57,57,-2,-4,18,80,-55,-36,57,57,95,-31,57,57,57,57,57,57,57,-80,-81,-82,57,80,18,18,-42,57,18,57,57,-45,-46,57,57,-23,-25,-34,57,-36,-57,-58,57,-32,18,18,18,18,-24,-33,-26,]),'LBRACKET':([0,2,3,5,7,8,9,10,14,16,18,21,27,28,29,31,33,34,35,37,38,40,41,42,43,44,45,47,48,49,50,51,53,54,55,56,57,66,70,71,78,79,80,82,83,84,85,86,91,93,94,97,98,99,101,104,106,116,117,118,119,122,125,127,130,131,132,133,137,138,143,144,145,146,147,148,],[28,28,-3,-5,-11,-12,-13,-14,56,56,28,56,-36,28,-55,79,-54,-56,56,-37,-38,-51,-52,-53,-39,-40,-41,56,56,-2,-4,28,79,-55,-36,56,56,56,56,56,56,56,56,56,-80,-81,-82,56,79,28,28,-42,56,28,56,56,-45,-46,56,56,-23,-25,-34,56,-36,-57,-58,56,-32,28,28,28,28,-24,-33,-26,]),'NOT':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,49,50,51,56,57,66,70,71,78,79,80,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[35,35,-3,-5,-11,-12,-13,-14,35,35,35,35,35,35,35,-2,-4,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-23,-25,-34,35,35,-32,35,35,35,35,-24,-33,-26,]),'integer':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,48,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[40,40,-3,-5,-11,-12,-13,-14,40,40,40,40,40,40,40,40,-2,-4,40,40,40,40,40,40,40,40,40,40,-80,-81,-82,40,40,40,40,40,40,40,40,40,-23,-25,-34,40,40,-32,40,40,40,40,-24,-33,-26,]),'TRUE':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,48,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[41,41,-3,-5,-11,-12,-13,-14,41,41,41,41,41,41,41,41,-2,-4,41,41,41,41,41,41,41,41,41,41,-80,-81,-82,41,41,41,41,41,41,41,41,41,-23,-25,-34,41,41,-32,41,41,41,41,-24,-33,-26,]),'FALSE':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,48,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[42,42,-3,-5,-11,-12,-13,-14,42,42,42,42,42,42,42,42,-2,-4,42,42,42,42,42,42,42,42,42,42,-80,-81,-82,42,42,42,42,42,42,42,42,42,-23,-25,-34,42,42,-32,42,42,42,42,-24,-33,-26,]),'LBRACE':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,48,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[47,47,-3,-5,-11,-12,-13,-14,47,47,47,47,47,47,47,47,-2,-4,47,47,47,47,47,47,47,47,47,47,-80,-81,-82,47,47,47,47,47,47,47,47,47,-23,-25,-34,47,47,-32,47,47,47,47,-24,-33,-26,]),'MINUS':([0,2,3,5,7,8,9,10,14,16,18,21,28,35,47,49,50,51,56,57,66,70,71,78,79,80,82,83,84,85,86,93,94,98,99,101,104,117,118,119,122,125,127,133,137,138,143,144,145,146,147,148,],[48,48,-3,-5,-11,-12,-13,-14,48,48,48,48,48,48,48,-2,-4,48,48,48,48,48,48,48,48,48,48,-80,-81,-82,48,48,48,48,48,48,48,48,48,-23,-25,-34,48,48,-32,48,48,48,48,-24,-33,-26,]),'$end':([1,2,3,5,7,8,9,10,49,50,119,122,125,137,146,147,148,],[0,-1,-3,-5,-11,-12,-13,-14,-2,-4,-23,-25,-34,-32,-24,-33,-26,]),'DEDENT':([3,5,7,8,9,10,49,50,119,122,125,137,144,146,147,148,],[-3,-5,-11,-12,-13,-14,-2,-4,-23,-25,-34,-32,147,-24,-33,-26,]),'NEWLINE':([4,6,11,12,13,15,21,22,23,25,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,67,68,69,81,91,92,93,94,97,99,100,103,106,107,114,115,116,120,126,128,130,131,132,141,143,145,],[50,-7,-8,-9,-10,-15,-87,-67,-68,-69,-36,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-22,-65,-66,-76,-86,-6,121,121,-42,121,-16,-73,-45,-75,-79,-83,-46,137,-64,-71,-36,-57,-58,-70,121,121,]),'SEMICOLON':([4,6,11,12,13,15,21,22,23,25,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,67,68,69,81,91,92,97,100,103,106,107,114,115,116,120,126,128,130,131,132,141,],[51,-7,-8,-9,-10,-15,-87,-67,-68,-69,-36,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-22,-65,-66,-76,-86,-6,-42,-16,-73,-45,-75,-79,-83,-46,51,-64,-71,-36,-57,-58,-70,]),'EQUALS':([20,24,27,29,96,105,131,],[66,-17,-18,-21,-19,-20,-57,]),'COMMA':([21,22,23,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,53,54,55,56,67,68,69,77,79,80,81,87,88,89,91,97,103,106,107,108,110,111,112,113,114,115,116,126,128,130,131,132,134,135,141,142,],[-87,-67,-68,-69,-36,-87,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-87,-85,-55,-36,-87,101,-65,-66,101,-87,-87,-76,117,-48,-49,-86,-42,-73,-45,-75,101,133,-61,-62,-63,-79,-83,-46,-64,-71,-36,-57,-58,-47,-50,-70,-60,]),'COLON':([22,23,25,26,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,52,53,54,55,58,62,63,64,65,72,73,74,75,81,90,91,95,97,103,106,107,114,115,116,123,124,128,129,130,131,132,136,139,141,],[-67,-68,-69,-87,-36,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,93,-85,-55,-36,94,98,-43,99,-35,104,-28,-29,-30,-76,118,-86,-87,-42,-73,-45,-75,-79,-83,-46,140,-44,-71,-27,-30,-57,-58,143,145,-70,]),'RPAREN':([22,23,24,25,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,61,62,63,73,74,75,80,81,91,95,96,97,103,105,106,107,109,110,111,112,113,114,115,116,123,124,128,129,130,131,132,141,142,],[-67,-68,-17,-69,-18,-21,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,96,97,-43,-28,-29,-30,-87,-76,-86,-87,-19,-42,-73,-20,-45,-75,132,-59,-61,-62,-63,-79,-83,-46,139,-44,-71,-27,-36,-57,-58,-70,-60,]),'RBRACKET':([22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,56,68,69,76,77,79,81,91,96,97,103,105,106,107,108,114,115,116,126,128,130,131,132,141,],[-67,-68,-17,-69,-18,-87,-21,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-87,-65,-66,105,106,-87,-76,-86,-19,-42,-73,-20,-45,-75,131,-79,-83,-46,-64,-71,-36,-57,-58,-70,]),'RBRACE':([22,23,25,30,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,53,54,55,81,87,88,89,91,97,103,106,107,114,115,116,128,130,131,132,134,135,141,],[-67,-68,-69,-72,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-87,-85,-55,-36,-76,116,-48,-49,-86,-42,-73,-45,-75,-79,-83,-46,-71,-36,-57,-58,-47,-50,-70,]),'OR':([25,27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,81,91,97,102,103,106,107,114,115,116,130,131,132,],[71,-36,-55,-72,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-76,-86,-42,71,-73,-45,-75,-79,-83,-46,-36,-57,-58,]),'PLUS':([27,29,31,33,34,37,38,39,40,41,42,43,44,45,46,53,54,55,91,97,106,114,115,116,130,131,132,],[-36,-55,-85,-54,-56,-37,-38,86,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-86,-42,-45,86,-83,-46,-36,-57,-58,]),'EQ':([27,29,31,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,91,97,106,114,115,116,130,131,132,],[-36,-55,-85,-54,-56,83,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-86,-42,-45,-79,-83,-46,-36,-57,-58,]),'NOT_EQ':([27,29,31,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,91,97,106,114,115,116,130,131,132,],[-36,-55,-85,-54,-56,84,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-86,-42,-45,-79,-83,-46,-36,-57,-58,]),'IS':([27,29,31,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,91,97,106,114,115,116,130,131,132,],[-36,-55,-85,-54,-56,85,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-86,-42,-45,-79,-83,-46,-36,-57,-58,]),'AND':([27,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,81,91,97,103,106,107,114,115,116,130,131,132,],[-36,-55,78,-85,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-76,-86,-42,78,-45,-75,-79,-83,-46,-36,-57,-58,]),'ELSE':([30,32,33,34,36,37,38,39,40,41,42,43,44,45,46,53,54,55,81,91,97,102,103,106,107,114,115,116,119,131,132,137,147,],[-72,-74,-54,-56,-77,-37,-38,-78,-51,-52,-53,-39,-40,-41,-84,-85,-55,-36,-76,-86,-42,127,-73,-45,-75,-79,-83,-46,136,-57,-58,-32,-33,]),'INDENT':([121,],[138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,138,],[2,144,]),'statement':([0,2,138,144,],[3,49,3,49,]),'stmt_list':([0,2,93,94,99,138,143,144,145,],[4,4,120,120,120,4,120,4,120,]),'compound_stmt':([0,2,138,144,],[5,5,5,5,]),'simple_stmt':([0,2,51,93,94,99,138,143,144,145,],[6,6,92,6,6,6,6,6,6,6,]),'if_stmt':([0,2,138,144,],[7,7,7,7,]),'while_stmt':([0,2,138,144,],[8,8,8,8,]),'funcdef':([0,2,138,144,],[9,9,9,9,]),'classdef':([0,2,138,144,],[10,10,10,10,]),'expression_stmt':([0,2,51,93,94,99,138,143,144,145,],[11,11,11,11,11,11,11,11,11,11,]),'assignment_stmt':([0,2,51,93,94,99,138,143,144,145,],[12,12,12,12,12,12,12,12,12,12,]),'return_stmt':([0,2,51,93,94,99,138,143,144,145,],[13,13,13,13,13,13,13,13,13,13,]),'expression':([0,2,14,16,18,21,28,47,51,56,57,66,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[15,15,52,58,63,68,68,90,15,68,63,100,68,113,15,15,124,15,126,128,90,135,141,113,15,15,15,15,]),'target_list':([0,2,18,28,51,93,94,99,138,143,144,145,],[20,20,61,76,20,20,20,20,20,20,20,20,]),'conditional_expression':([0,2,14,16,18,21,28,47,51,56,57,66,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'lambda_expr':([0,2,14,16,18,21,28,47,51,56,57,66,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'target':([0,2,18,28,51,93,94,99,138,143,144,145,],[24,24,24,24,24,24,24,24,24,24,24,24,]),'or_test':([0,2,14,16,18,21,28,47,51,56,57,66,70,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[25,25,25,25,25,25,25,25,25,25,25,25,102,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'subscription':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[29,29,54,54,29,54,29,54,54,54,29,54,54,54,54,54,54,54,54,54,54,29,29,54,29,54,54,54,54,54,54,29,29,29,29,]),'and_test':([0,2,14,16,18,21,28,47,51,56,57,66,70,71,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[30,30,30,30,30,30,30,30,30,30,30,30,30,103,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'primary':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[31,31,53,53,31,53,31,53,53,91,31,53,53,53,53,53,53,53,53,53,53,31,31,53,31,53,53,53,53,53,53,31,31,31,31,]),'not_test':([0,2,14,16,18,21,28,35,47,51,56,57,66,70,71,78,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[32,32,32,32,32,32,32,81,32,32,32,32,32,32,32,107,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'atom':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'call':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'comparison':([0,2,14,16,18,21,28,35,47,51,56,57,66,70,71,78,79,80,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'literal':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'enclosure':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'a_expr':([0,2,14,16,18,21,28,35,47,51,56,57,66,70,71,78,79,80,82,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,114,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'parenth_form':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'list_display':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'dict_display':([0,2,14,16,18,21,28,35,47,48,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'u_expr':([0,2,14,16,18,21,28,35,47,51,56,57,66,70,71,78,79,80,82,86,93,94,98,99,101,104,117,118,127,133,138,143,144,145,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,115,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'funcname':([17,],[59,]),'starred_expression':([18,57,],[62,62,]),'classname':([19,],[64,]),'expression_list':([21,28,56,79,],[67,77,77,108,]),'empty':([21,26,28,47,56,79,80,95,],[69,74,69,89,69,69,112,74,]),'parameter_list':([26,95,],[72,123,]),'parameter':([26,95,104,140,],[73,73,129,129,]),'comp_operator':([36,],[82,]),'key_datum_list':([47,],[87,]),'key_datum':([47,117,],[88,134,]),'argument_list':([80,],[109,]),'positional_arguments':([80,],[110,]),'positional_item':([80,133,],[111,142,]),'suite':([93,94,99,143,145,],[119,122,125,146,148,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','p0.py',255),
  ('statements -> statements statement','statements',2,'p_statements','p0.py',263),
  ('statements -> statement','statements',1,'p_statements','p0.py',264),
  ('statement -> stmt_list NEWLINE','statement',2,'p_statement','p0.py',275),
  ('statement -> compound_stmt','statement',1,'p_statement','p0.py',276),
  ('stmt_list -> stmt_list SEMICOLON simple_stmt','stmt_list',3,'p_stmt_list','p0.py',284),
  ('stmt_list -> simple_stmt','stmt_list',1,'p_stmt_list','p0.py',285),
  ('simple_stmt -> expression_stmt','simple_stmt',1,'p_simple_stmt','p0.py',296),
  ('simple_stmt -> assignment_stmt','simple_stmt',1,'p_simple_stmt','p0.py',297),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','p0.py',298),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','p0.py',306),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','p0.py',307),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','p0.py',308),
  ('compound_stmt -> classdef','compound_stmt',1,'p_compound_stmt','p0.py',309),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','p0.py',317),
  ('assignment_stmt -> target_list EQUALS expression','assignment_stmt',3,'p_assignment_stmt','p0.py',325),
  ('target_list -> target','target_list',1,'p_target_list','p0.py',333),
  ('target -> identifier','target',1,'p_target','p0.py',341),
  ('target -> LPAREN target_list RPAREN','target',3,'p_target','p0.py',342),
  ('target -> LBRACKET target_list RBRACKET','target',3,'p_target','p0.py',343),
  ('target -> subscription','target',1,'p_target','p0.py',344),
  ('return_stmt -> RETURN expression_list','return_stmt',2,'p_return_stmt','p0.py',352),
  ('if_stmt -> IF expression COLON suite','if_stmt',4,'p_if_stmt','p0.py',360),
  ('if_stmt -> IF expression COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','p0.py',361),
  ('while_stmt -> WHILE expression COLON suite','while_stmt',4,'p_while_stmt','p0.py',372),
  ('funcdef -> DEF funcname LPAREN parameter_list RPAREN COLON suite','funcdef',7,'p_funcdef','p0.py',380),
  ('parameter_list -> parameter_list COLON parameter','parameter_list',3,'p_parameter_list','p0.py',388),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','p0.py',389),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','p0.py',390),
  ('parameter -> identifier','parameter',1,'p_parameter','p0.py',401),
  ('funcname -> identifier','funcname',1,'p_funcname','p0.py',409),
  ('suite -> stmt_list NEWLINE','suite',2,'p_suite','p0.py',417),
  ('suite -> NEWLINE INDENT statements DEDENT','suite',4,'p_suite','p0.py',418),
  ('classdef -> CLASS classname COLON suite','classdef',4,'p_classdef','p0.py',429),
  ('classname -> identifier','classname',1,'p_classname','p0.py',437),
  ('atom -> identifier','atom',1,'p_atom','p0.py',445),
  ('atom -> literal','atom',1,'p_atom','p0.py',446),
  ('atom -> enclosure','atom',1,'p_atom','p0.py',447),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','p0.py',455),
  ('enclosure -> list_display','enclosure',1,'p_enclosure','p0.py',456),
  ('enclosure -> dict_display','enclosure',1,'p_enclosure','p0.py',457),
  ('parenth_form -> LPAREN starred_expression RPAREN','parenth_form',3,'p_parenth_form','p0.py',465),
  ('starred_expression -> expression','starred_expression',1,'p_starred_expression','p0.py',473),
  ('starred_expression -> starred_expression COLON expression','starred_expression',3,'p_starred_expression','p0.py',474),
  ('list_display -> LBRACKET expression_list RBRACKET','list_display',3,'p_list_display','p0.py',485),
  ('dict_display -> LBRACE key_datum_list RBRACE','dict_display',3,'p_dict_display','p0.py',493),
  ('key_datum_list -> key_datum_list COMMA key_datum','key_datum_list',3,'p_key_datum_list','p0.py',505),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_key_datum_list','p0.py',506),
  ('key_datum_list -> empty','key_datum_list',1,'p_key_datum_list','p0.py',507),
  ('key_datum -> expression COLON expression','key_datum',3,'p_key_datum','p0.py',518),
  ('literal -> integer','literal',1,'p_literal','p0.py',526),
  ('literal -> TRUE','literal',1,'p_literal','p0.py',527),
  ('literal -> FALSE','literal',1,'p_literal','p0.py',528),
  ('primary -> atom','primary',1,'p_primary','p0.py',536),
  ('primary -> subscription','primary',1,'p_primary','p0.py',537),
  ('primary -> call','primary',1,'p_primary','p0.py',538),
  ('subscription -> primary LBRACKET expression_list RBRACKET','subscription',4,'p_subscription','p0.py',546),
  ('call -> primary LPAREN argument_list RPAREN','call',4,'p_call','p0.py',554),
  ('argument_list -> positional_arguments','argument_list',1,'p_argument_list','p0.py',562),
  ('positional_arguments -> positional_arguments COMMA positional_item','positional_arguments',3,'p_positional_arguments','p0.py',570),
  ('positional_arguments -> positional_item','positional_arguments',1,'p_positional_arguments','p0.py',571),
  ('positional_arguments -> empty','positional_arguments',1,'p_positional_arguments','p0.py',572),
  ('positional_item -> expression','positional_item',1,'p_positional_item','p0.py',583),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','p0.py',591),
  ('expression_list -> expression','expression_list',1,'p_expression_list','p0.py',592),
  ('expression_list -> empty','expression_list',1,'p_expression_list','p0.py',593),
  ('expression -> conditional_expression','expression',1,'p_expression','p0.py',604),
  ('expression -> lambda_expr','expression',1,'p_expression','p0.py',605),
  ('conditional_expression -> or_test','conditional_expression',1,'p_conditional_expression','p0.py',613),
  ('conditional_expression -> or_test IF or_test ELSE expression','conditional_expression',5,'p_conditional_expression','p0.py',614),
  ('lambda_expr -> LAMBDA parameter_list COLON expression','lambda_expr',4,'p_lambda_expr','p0.py',625),
  ('or_test -> and_test','or_test',1,'p_or_test','p0.py',633),
  ('or_test -> or_test OR and_test','or_test',3,'p_or_test','p0.py',634),
  ('and_test -> not_test','and_test',1,'p_and_test','p0.py',645),
  ('and_test -> and_test AND not_test','and_test',3,'p_and_test','p0.py',646),
  ('not_test -> NOT not_test','not_test',2,'p_not_test','p0.py',657),
  ('not_test -> comparison','not_test',1,'p_not_test','p0.py',658),
  ('comparison -> a_expr','comparison',1,'p_comparison','p0.py',669),
  ('comparison -> comparison comp_operator a_expr','comparison',3,'p_comparison','p0.py',670),
  ('comp_operator -> EQ','comp_operator',1,'p_comp_operator','p0.py',681),
  ('comp_operator -> NOT_EQ','comp_operator',1,'p_comp_operator','p0.py',682),
  ('comp_operator -> IS','comp_operator',1,'p_comp_operator','p0.py',683),
  ('a_expr -> a_expr PLUS u_expr','a_expr',3,'p_a_expr','p0.py',691),
  ('a_expr -> u_expr','a_expr',1,'p_a_expr','p0.py',692),
  ('u_expr -> primary','u_expr',1,'p_u_expr','p0.py',703),
  ('u_expr -> MINUS primary','u_expr',2,'p_u_expr','p0.py',704),
  ('empty -> <empty>','empty',0,'p_empty','p0.py',714),
]
