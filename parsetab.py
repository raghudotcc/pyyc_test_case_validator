
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTrightEQUALSleftPLUSMINUSrightUMINUSAND ASSIGN CLASS COLON COMMA DEDENT DEF ELSE ENDMARKER EQ EQUALS FALSE IF INDENT IS LAMBDA LBRACE LBRACKET LPAREN MINUS NE NEWLINE NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TRUE WHILE WHITESPACE identifier integer\n        module : statements\n               | NEWLINE\n        \n        statements : statement statements\n                   | statement\n        \n        statement : stmt_list NEWLINE\n                  | compound_stmt\n        \n        stmt_list : simple_stmt\n        \n        simple_stmt : expression_stmt\n                    | assignment_stmt\n                    | return_stmt\n        \n        compound_stmt : if_stmt\n                      | while_stmt\n                      | funcdef\n        \n        expression_stmt : expression\n        \n        assignment_stmt : target_list ASSIGN expression\n        \n        target_list : target\n        \n        target : identifier\n               | LPAREN target_list RPAREN\n               | LBRACKET target_list RBRACKET\n               | subscription\n        \n        atom : identifier\n             | literal\n             | enclosure\n        \n        literal : integer\n                | TRUE\n                | FALSE\n        \n        enclosure : parenth_form\n                   | list_display\n                   | dict_display\n        \n        parenth_form : LPAREN expression RPAREN\n        \n        list_display : LBRACKET expression_list RBRACKET\n        \n        dict_display : LBRACE key_datum_list RBRACE\n        \n        key_datum_list : key_datum_list COMMA key_datum\n                       | key_datum\n                       | empty\n        \n        key_datum : expression COLON expression\n        \n        subscription : primary LBRACKET expression_list RBRACKET\n        \n        primary : atom\n                | call\n                | subscription\n        \n        call : primary LPAREN argument_list RPAREN\n        \n        argument_list : positional_arguments\n        \n        positional_arguments : positional_arguments COMMA positional_item\n                             | positional_item\n                             | empty\n        \n        positional_item : expression\n        \n        expression_list : expression_list COMMA expression\n                         | expression\n                         | empty\n        \n        expression : conditional_expression\n                    | lambda_expr\n        \n        conditional_expression : or_test\n                                | or_test IF or_test ELSE conditional_expression\n        \n        lambda_expr : LAMBDA parameter_list COLON expression\n        \n        parameter_list : parameter_list COMMA parameter\n                       | parameter\n                       | empty\n        \n        parameter : identifier\n        \n        or_test : and_test\n                | or_test OR and_test\n        \n        and_test : not_test\n                 | and_test AND not_test\n        \n        not_test : NOT not_test\n                 | comparison\n        \n        comparison : comparison comp_operator a_expr\n                   | a_expr\n        \n        comp_operator : EQ\n                      | NE\n                      | IS\n        \n        a_expr : a_expr PLUS u_expr\n               | u_expr\n        \n        if_stmt : IF expression COLON suite\n            | IF expression COLON suite ELSE COLON suite\n        \n        while_stmt : WHILE expression COLON suite\n        \n        funcdef : DEF funcname LPAREN parameter_list RPAREN COLON suite\n        \n        funcname : identifier\n        \n        return_stmt : RETURN expression_list\n        \n        suite : stmt_list NEWLINE\n              | NEWLINE INDENT statements DEDENT\n        \n        u_expr : primary\n               | MINUS u_expr %prec UMINUS\n        \n        empty :\n        '
    
_lr_action_items = {'NEWLINE':([0,5,7,11,12,13,15,20,21,22,24,26,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,62,63,64,76,86,87,88,91,92,95,99,100,107,108,109,113,117,119,121,122,130,132,134,],[3,49,-7,-8,-9,-10,-14,-82,-50,-51,-52,-21,-40,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-77,-48,-49,-63,-81,114,114,-30,-15,-60,-31,-62,-65,-70,-32,127,-47,-54,-37,-41,-53,114,114,]),'IF':([0,4,6,8,9,10,24,26,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,49,51,52,53,76,86,91,95,99,100,107,108,109,112,115,121,122,127,128,135,136,137,],[14,14,-6,-11,-12,-13,65,-21,-40,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-5,-80,-40,-21,-63,-81,-30,-60,-31,-62,-65,-70,-32,-72,-74,-37,-41,-78,14,-73,-79,-75,]),'WHILE':([0,4,6,8,9,10,49,112,115,127,128,135,136,137,],[16,16,-6,-11,-12,-13,-5,-72,-74,-78,16,-73,-79,-75,]),'DEF':([0,4,6,8,9,10,49,112,115,127,128,135,136,137,],[17,17,-6,-11,-12,-13,-5,-72,-74,-78,17,-73,-79,-75,]),'RETURN':([0,4,6,8,9,10,49,87,88,112,115,127,128,132,134,135,136,137,],[20,20,-6,-11,-12,-13,-5,20,20,-72,-74,-78,20,20,20,-73,-79,-75,]),'LAMBDA':([0,4,6,8,9,10,14,16,18,20,27,46,49,54,55,61,74,75,87,88,93,96,110,111,112,115,123,127,128,132,134,135,136,137,],[25,25,-6,-11,-12,-13,25,25,25,25,25,25,-5,25,25,25,25,25,25,25,25,25,25,25,-72,-74,25,-78,25,25,25,-73,-79,-75,]),'identifier':([0,4,6,8,9,10,14,16,17,18,20,25,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,89,93,96,97,110,111,112,115,118,123,127,128,132,134,135,136,137,],[26,26,-6,-11,-12,-13,53,53,58,26,53,70,26,53,53,53,-5,53,53,53,53,53,53,53,53,53,-67,-68,-69,53,26,26,70,53,53,70,53,53,-72,-74,53,53,-78,26,26,26,-73,-79,-75,]),'LPAREN':([0,4,6,8,9,10,14,16,18,20,26,27,28,30,32,33,34,36,37,39,40,41,42,43,44,46,47,49,51,52,53,54,55,57,58,61,65,66,73,74,75,77,78,79,80,81,87,88,91,93,96,99,109,110,111,112,115,118,121,122,123,127,128,132,134,135,136,137,],[18,18,-6,-11,-12,-13,54,54,18,54,-21,18,-40,75,-38,-39,54,-22,-23,-24,-25,-26,-27,-28,-29,54,54,-5,75,-40,-21,54,54,89,-76,54,54,54,54,54,54,54,-67,-68,-69,54,18,18,-30,54,54,-31,-32,54,54,-72,-74,54,-37,-41,54,-78,18,18,18,-73,-79,-75,]),'LBRACKET':([0,4,6,8,9,10,14,16,18,20,26,27,28,30,32,33,34,36,37,39,40,41,42,43,44,46,47,49,51,52,53,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,91,93,96,99,109,110,111,112,115,118,121,122,123,127,128,132,134,135,136,137,],[27,27,-6,-11,-12,-13,55,55,27,55,-21,27,-40,74,-38,-39,55,-22,-23,-24,-25,-26,-27,-28,-29,55,55,-5,74,-40,-21,55,55,55,55,55,55,55,55,55,-67,-68,-69,55,27,27,-30,55,55,-31,-32,55,55,-72,-74,55,-37,-41,55,-78,27,27,27,-73,-79,-75,]),'NOT':([0,4,6,8,9,10,14,16,18,20,27,34,46,49,54,55,61,65,66,73,74,75,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[34,34,-6,-11,-12,-13,34,34,34,34,34,34,34,-5,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-72,-74,34,34,-78,34,34,34,-73,-79,-75,]),'integer':([0,4,6,8,9,10,14,16,18,20,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[39,39,-6,-11,-12,-13,39,39,39,39,39,39,39,39,-5,39,39,39,39,39,39,39,39,39,-67,-68,-69,39,39,39,39,39,39,39,-72,-74,39,39,-78,39,39,39,-73,-79,-75,]),'TRUE':([0,4,6,8,9,10,14,16,18,20,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[40,40,-6,-11,-12,-13,40,40,40,40,40,40,40,40,-5,40,40,40,40,40,40,40,40,40,-67,-68,-69,40,40,40,40,40,40,40,-72,-74,40,40,-78,40,40,40,-73,-79,-75,]),'FALSE':([0,4,6,8,9,10,14,16,18,20,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[41,41,-6,-11,-12,-13,41,41,41,41,41,41,41,41,-5,41,41,41,41,41,41,41,41,41,-67,-68,-69,41,41,41,41,41,41,41,-72,-74,41,41,-78,41,41,41,-73,-79,-75,]),'LBRACE':([0,4,6,8,9,10,14,16,18,20,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[46,46,-6,-11,-12,-13,46,46,46,46,46,46,46,46,-5,46,46,46,46,46,46,46,46,46,-67,-68,-69,46,46,46,46,46,46,46,-72,-74,46,46,-78,46,46,46,-73,-79,-75,]),'MINUS':([0,4,6,8,9,10,14,16,18,20,27,34,46,47,49,54,55,61,65,66,73,74,75,77,78,79,80,81,87,88,93,96,110,111,112,115,118,123,127,128,132,134,135,136,137,],[47,47,-6,-11,-12,-13,47,47,47,47,47,47,47,47,-5,47,47,47,47,47,47,47,47,47,-67,-68,-69,47,47,47,47,47,47,47,-72,-74,47,47,-78,47,47,47,-73,-79,-75,]),'$end':([1,2,3,4,6,8,9,10,48,49,112,115,127,135,136,137,],[0,-1,-2,-4,-6,-11,-12,-13,-3,-5,-72,-74,-78,-73,-79,-75,]),'DEDENT':([4,6,8,9,10,48,49,112,115,127,133,135,136,137,],[-4,-6,-11,-12,-13,-3,-5,-72,-74,-78,136,-73,-79,-75,]),'ASSIGN':([19,23,26,28,90,98,121,],[61,-16,-17,-20,-18,-19,-37,]),'COMMA':([20,21,22,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,51,52,53,55,62,63,64,67,68,69,70,72,74,75,76,82,83,84,86,89,91,95,99,100,101,103,104,105,106,107,108,109,116,117,119,120,121,122,124,125,130,131,],[-82,-50,-51,-52,-82,-21,-82,-40,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-82,-80,-40,-21,-82,93,-48,-49,97,-56,-57,-58,93,-82,-82,-63,110,-34,-35,-81,-82,-30,-60,-31,-62,93,123,-44,-45,-46,-65,-70,-32,97,-47,-54,-55,-37,-41,-33,-36,-53,-43,]),'COLON':([21,22,24,25,29,31,32,33,35,36,37,38,39,40,41,42,43,44,45,50,51,52,53,56,67,68,69,70,76,85,86,91,95,99,100,107,108,109,119,120,121,122,126,129,130,],[-50,-51,-52,-82,-59,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,87,-80,-40,-21,88,96,-56,-57,-58,-63,111,-81,-30,-60,-31,-62,-65,-70,-32,-54,-55,-37,-41,132,134,-53,]),'RPAREN':([21,22,23,24,26,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,59,60,68,69,70,75,76,86,89,90,91,95,98,99,100,102,103,104,105,106,107,108,109,116,119,120,121,122,130,131,],[-50,-51,-16,-52,-17,-20,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,90,91,-56,-57,-58,-82,-63,-81,-82,-18,-30,-60,-19,-31,-62,122,-42,-44,-45,-46,-65,-70,-32,129,-54,-55,-37,-41,-53,-43,]),'RBRACKET':([21,22,23,24,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,55,63,64,71,72,74,76,86,90,91,95,98,99,100,101,107,108,109,117,119,121,122,130,],[-50,-51,-16,-52,-17,-82,-20,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-82,-48,-49,98,99,-82,-63,-81,-18,-30,-60,-19,-31,-62,121,-65,-70,-32,-47,-54,-37,-41,-53,]),'RBRACE':([21,22,24,29,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,51,52,53,76,82,83,84,86,91,95,99,100,107,108,109,119,121,122,124,125,130,],[-50,-51,-52,-59,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-82,-80,-40,-21,-63,109,-34,-35,-81,-30,-60,-31,-62,-65,-70,-32,-54,-37,-41,-33,-36,-53,]),'OR':([24,26,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,76,86,91,94,95,99,100,107,108,109,121,122,],[66,-21,-40,-59,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-63,-81,-30,66,-60,-31,-62,-65,-70,-32,-37,-41,]),'PLUS':([26,28,30,32,33,36,37,38,39,40,41,42,43,44,45,51,52,53,86,91,99,107,108,109,121,122,],[-21,-40,-80,-38,-39,-22,-23,81,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-81,-30,-31,81,-70,-32,-37,-41,]),'EQ':([26,28,30,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,86,91,99,107,108,109,121,122,],[-21,-40,-80,-38,-39,78,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-81,-30,-31,-65,-70,-32,-37,-41,]),'NE':([26,28,30,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,86,91,99,107,108,109,121,122,],[-21,-40,-80,-38,-39,79,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-81,-30,-31,-65,-70,-32,-37,-41,]),'IS':([26,28,30,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,86,91,99,107,108,109,121,122,],[-21,-40,-80,-38,-39,80,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-81,-30,-31,-65,-70,-32,-37,-41,]),'AND':([26,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,76,86,91,95,99,100,107,108,109,121,122,],[-21,-40,73,-80,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-63,-81,-30,73,-31,-62,-65,-70,-32,-37,-41,]),'ELSE':([29,31,32,33,35,36,37,38,39,40,41,42,43,44,45,51,52,53,76,86,91,94,95,99,100,107,108,109,112,121,122,127,136,],[-59,-61,-38,-39,-64,-22,-23,-66,-24,-25,-26,-27,-28,-29,-71,-80,-40,-21,-63,-81,-30,118,-60,-31,-62,-65,-70,-32,126,-37,-41,-78,-79,]),'INDENT':([114,],[128,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,4,128,],[2,48,133,]),'statement':([0,4,128,],[4,4,4,]),'stmt_list':([0,4,87,88,128,132,134,],[5,5,113,113,5,113,113,]),'compound_stmt':([0,4,128,],[6,6,6,]),'simple_stmt':([0,4,87,88,128,132,134,],[7,7,7,7,7,7,7,]),'if_stmt':([0,4,128,],[8,8,8,]),'while_stmt':([0,4,128,],[9,9,9,]),'funcdef':([0,4,128,],[10,10,10,]),'expression_stmt':([0,4,87,88,128,132,134,],[11,11,11,11,11,11,11,]),'assignment_stmt':([0,4,87,88,128,132,134,],[12,12,12,12,12,12,12,]),'return_stmt':([0,4,87,88,128,132,134,],[13,13,13,13,13,13,13,]),'expression':([0,4,14,16,18,20,27,46,54,55,61,74,75,87,88,93,96,110,111,123,128,132,134,],[15,15,50,56,60,63,63,85,60,63,92,63,106,15,15,117,119,85,125,106,15,15,15,]),'target_list':([0,4,18,27,87,88,128,132,134,],[19,19,59,71,19,19,19,19,19,]),'conditional_expression':([0,4,14,16,18,20,27,46,54,55,61,74,75,87,88,93,96,110,111,118,123,128,132,134,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,130,21,21,21,21,]),'lambda_expr':([0,4,14,16,18,20,27,46,54,55,61,74,75,87,88,93,96,110,111,123,128,132,134,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'target':([0,4,18,27,87,88,128,132,134,],[23,23,23,23,23,23,23,23,23,]),'or_test':([0,4,14,16,18,20,27,46,54,55,61,65,74,75,87,88,93,96,110,111,118,123,128,132,134,],[24,24,24,24,24,24,24,24,24,24,24,94,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'subscription':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[28,28,52,52,28,52,28,52,52,52,52,52,52,52,52,52,52,52,52,52,28,28,52,52,52,52,52,52,28,28,28,]),'and_test':([0,4,14,16,18,20,27,46,54,55,61,65,66,74,75,87,88,93,96,110,111,118,123,128,132,134,],[29,29,29,29,29,29,29,29,29,29,29,29,95,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'primary':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[30,30,51,51,30,51,30,51,51,51,51,51,51,51,51,51,51,51,51,51,30,30,51,51,51,51,51,51,30,30,30,]),'not_test':([0,4,14,16,18,20,27,34,46,54,55,61,65,66,73,74,75,87,88,93,96,110,111,118,123,128,132,134,],[31,31,31,31,31,31,31,76,31,31,31,31,31,31,100,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'atom':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'call':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'comparison':([0,4,14,16,18,20,27,34,46,54,55,61,65,66,73,74,75,87,88,93,96,110,111,118,123,128,132,134,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'literal':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'enclosure':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'a_expr':([0,4,14,16,18,20,27,34,46,54,55,61,65,66,73,74,75,77,87,88,93,96,110,111,118,123,128,132,134,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,107,38,38,38,38,38,38,38,38,38,38,38,]),'parenth_form':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'list_display':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'dict_display':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'u_expr':([0,4,14,16,18,20,27,34,46,47,54,55,61,65,66,73,74,75,77,81,87,88,93,96,110,111,118,123,128,132,134,],[45,45,45,45,45,45,45,45,45,86,45,45,45,45,45,45,45,45,45,108,45,45,45,45,45,45,45,45,45,45,45,]),'funcname':([17,],[57,]),'expression_list':([20,27,55,74,],[62,72,72,101,]),'empty':([20,25,27,46,55,74,75,89,],[64,69,64,84,64,64,105,69,]),'parameter_list':([25,89,],[67,116,]),'parameter':([25,89,97,],[68,68,120,]),'comp_operator':([35,],[77,]),'key_datum_list':([46,],[82,]),'key_datum':([46,110,],[83,124,]),'argument_list':([75,],[102,]),'positional_arguments':([75,],[103,]),'positional_item':([75,123,],[104,131,]),'suite':([87,88,132,134,],[112,115,135,137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','pp.py',194),
  ('module -> NEWLINE','module',1,'p_module','pp.py',195),
  ('statements -> statement statements','statements',2,'p_statements','pp.py',202),
  ('statements -> statement','statements',1,'p_statements','pp.py',203),
  ('statement -> stmt_list NEWLINE','statement',2,'p_statement','pp.py',213),
  ('statement -> compound_stmt','statement',1,'p_statement','pp.py',214),
  ('stmt_list -> simple_stmt','stmt_list',1,'p_stmt_list','pp.py',223),
  ('simple_stmt -> expression_stmt','simple_stmt',1,'p_simple_stmt','pp.py',230),
  ('simple_stmt -> assignment_stmt','simple_stmt',1,'p_simple_stmt','pp.py',231),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','pp.py',232),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','pp.py',239),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','pp.py',240),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','pp.py',241),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','pp.py',248),
  ('assignment_stmt -> target_list ASSIGN expression','assignment_stmt',3,'p_assignment_stmt','pp.py',256),
  ('target_list -> target','target_list',1,'p_target_list','pp.py',263),
  ('target -> identifier','target',1,'p_target','pp.py',270),
  ('target -> LPAREN target_list RPAREN','target',3,'p_target','pp.py',271),
  ('target -> LBRACKET target_list RBRACKET','target',3,'p_target','pp.py',272),
  ('target -> subscription','target',1,'p_target','pp.py',273),
  ('atom -> identifier','atom',1,'p_atom','pp.py',283),
  ('atom -> literal','atom',1,'p_atom','pp.py',284),
  ('atom -> enclosure','atom',1,'p_atom','pp.py',285),
  ('literal -> integer','literal',1,'p_literal','pp.py',295),
  ('literal -> TRUE','literal',1,'p_literal','pp.py',296),
  ('literal -> FALSE','literal',1,'p_literal','pp.py',297),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','pp.py',304),
  ('enclosure -> list_display','enclosure',1,'p_enclosure','pp.py',305),
  ('enclosure -> dict_display','enclosure',1,'p_enclosure','pp.py',306),
  ('parenth_form -> LPAREN expression RPAREN','parenth_form',3,'p_parenth_form','pp.py',313),
  ('list_display -> LBRACKET expression_list RBRACKET','list_display',3,'p_list_display','pp.py',320),
  ('dict_display -> LBRACE key_datum_list RBRACE','dict_display',3,'p_dict_display','pp.py',327),
  ('key_datum_list -> key_datum_list COMMA key_datum','key_datum_list',3,'p_key_datum_list','pp.py',334),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_key_datum_list','pp.py',335),
  ('key_datum_list -> empty','key_datum_list',1,'p_key_datum_list','pp.py',336),
  ('key_datum -> expression COLON expression','key_datum',3,'p_key_datum','pp.py',352),
  ('subscription -> primary LBRACKET expression_list RBRACKET','subscription',4,'p_subscription','pp.py',360),
  ('primary -> atom','primary',1,'p_primary','pp.py',368),
  ('primary -> call','primary',1,'p_primary','pp.py',369),
  ('primary -> subscription','primary',1,'p_primary','pp.py',370),
  ('call -> primary LPAREN argument_list RPAREN','call',4,'p_call','pp.py',377),
  ('argument_list -> positional_arguments','argument_list',1,'p_argument_list','pp.py',384),
  ('positional_arguments -> positional_arguments COMMA positional_item','positional_arguments',3,'p_positional_arguments','pp.py',391),
  ('positional_arguments -> positional_item','positional_arguments',1,'p_positional_arguments','pp.py',392),
  ('positional_arguments -> empty','positional_arguments',1,'p_positional_arguments','pp.py',393),
  ('positional_item -> expression','positional_item',1,'p_positional_item','pp.py',403),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','pp.py',410),
  ('expression_list -> expression','expression_list',1,'p_expression_list','pp.py',411),
  ('expression_list -> empty','expression_list',1,'p_expression_list','pp.py',412),
  ('expression -> conditional_expression','expression',1,'p_expression','pp.py',422),
  ('expression -> lambda_expr','expression',1,'p_expression','pp.py',423),
  ('conditional_expression -> or_test','conditional_expression',1,'p_conditional_expression','pp.py',430),
  ('conditional_expression -> or_test IF or_test ELSE conditional_expression','conditional_expression',5,'p_conditional_expression','pp.py',431),
  ('lambda_expr -> LAMBDA parameter_list COLON expression','lambda_expr',4,'p_lambda_expr','pp.py',441),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','pp.py',448),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','pp.py',449),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','pp.py',450),
  ('parameter -> identifier','parameter',1,'p_parameter','pp.py',459),
  ('or_test -> and_test','or_test',1,'p_or_test','pp.py',466),
  ('or_test -> or_test OR and_test','or_test',3,'p_or_test','pp.py',467),
  ('and_test -> not_test','and_test',1,'p_and_test','pp.py',477),
  ('and_test -> and_test AND not_test','and_test',3,'p_and_test','pp.py',478),
  ('not_test -> NOT not_test','not_test',2,'p_not_test','pp.py',488),
  ('not_test -> comparison','not_test',1,'p_not_test','pp.py',489),
  ('comparison -> comparison comp_operator a_expr','comparison',3,'p_comparison','pp.py',499),
  ('comparison -> a_expr','comparison',1,'p_comparison','pp.py',500),
  ('comp_operator -> EQ','comp_operator',1,'p_comp_operator','pp.py',510),
  ('comp_operator -> NE','comp_operator',1,'p_comp_operator','pp.py',511),
  ('comp_operator -> IS','comp_operator',1,'p_comp_operator','pp.py',512),
  ('a_expr -> a_expr PLUS u_expr','a_expr',3,'p_a_expr','pp.py',519),
  ('a_expr -> u_expr','a_expr',1,'p_a_expr','pp.py',520),
  ('if_stmt -> IF expression COLON suite','if_stmt',4,'p_if_stmt','pp.py',530),
  ('if_stmt -> IF expression COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','pp.py',531),
  ('while_stmt -> WHILE expression COLON suite','while_stmt',4,'p_while_stmt','pp.py',541),
  ('funcdef -> DEF funcname LPAREN parameter_list RPAREN COLON suite','funcdef',7,'p_funcdef','pp.py',548),
  ('funcname -> identifier','funcname',1,'p_funcname','pp.py',555),
  ('return_stmt -> RETURN expression_list','return_stmt',2,'p_return_stmt','pp.py',562),
  ('suite -> stmt_list NEWLINE','suite',2,'p_suite','pp.py',569),
  ('suite -> NEWLINE INDENT statements DEDENT','suite',4,'p_suite','pp.py',570),
  ('u_expr -> primary','u_expr',1,'p_u_expr','pp.py',580),
  ('u_expr -> MINUS u_expr','u_expr',2,'p_u_expr','pp.py',581),
  ('empty -> <empty>','empty',0,'p_empty','pp.py',591),
]
