
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTrightEQUALSleftPLUSMINUSrightUMINUSAND ASSIGN CLASS COLON COMMA DEDENT DEF ELSE ENDMARKER EQ EQUALS FALSE IF INDENT IS LAMBDA LBRACE LBRACKET LPAREN MINUS NE NEWLINE NOT OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TRUE WHILE WHITESPACE identifier integer\n        module : statements\n        \n        statements : statement statements\n                   | statement\n        \n        statement : stmt_list NEWLINE\n                  | compound_stmt\n        \n        stmt_list : simple_stmt\n        \n        simple_stmt : expression_stmt\n                    | assignment_stmt\n                    | return_stmt\n        \n        compound_stmt : if_stmt\n                      | while_stmt\n                      | funcdef\n        \n        expression_stmt : expression\n        \n        assignment_stmt : target_list ASSIGN expression\n        \n        target_list : target\n        \n        target : identifier\n               | LPAREN target_list RPAREN\n               | LBRACKET target_list RBRACKET\n               | subscription\n        \n        atom : identifier\n             | literal\n             | enclosure\n        \n        literal : integer\n                | TRUE\n                | FALSE\n        \n        enclosure : parenth_form\n                   | list_display\n                   | dict_display\n        \n        parenth_form : LPAREN expression RPAREN\n        \n        list_display : LBRACKET expression_list RBRACKET\n        \n        dict_display : LBRACE key_datum_list RBRACE\n        \n        key_datum_list : key_datum_list COMMA key_datum\n                       | key_datum\n                       | empty\n        \n        key_datum : expression COLON expression\n        \n        subscription : primary LBRACKET expression_list RBRACKET\n        \n        primary : atom\n                | call\n                | subscription\n        \n        call : primary LPAREN argument_list RPAREN\n        \n        argument_list : positional_arguments\n        \n        positional_arguments : positional_arguments COMMA positional_item\n                             | positional_item\n                             | empty\n        \n        positional_item : expression\n        \n        expression_list : expression_list COMMA expression\n                         | expression\n                         | empty\n        \n        expression : conditional_expression\n                    | lambda_expr\n        \n        conditional_expression : or_test\n                                | or_test IF or_test ELSE conditional_expression\n        \n        lambda_expr : LAMBDA parameter_list COLON expression\n        \n        parameter_list : parameter_list COMMA parameter\n                       | parameter\n                       | empty\n        \n        parameter : identifier\n        \n        or_test : and_test\n                | or_test OR and_test\n        \n        and_test : not_test\n                 | and_test AND not_test\n        \n        not_test : NOT not_test\n                 | comparison\n        \n        comparison : comparison comp_operator a_expr\n                   | a_expr\n        \n        comp_operator : EQ\n                      | NE\n                      | IS\n        \n        a_expr : a_expr PLUS u_expr\n               | u_expr\n        \n        if_stmt : IF expression COLON suite\n            | IF expression COLON suite ELSE COLON suite\n        \n        while_stmt : WHILE expression COLON suite\n        \n        funcdef : DEF funcname LPAREN parameter_list RPAREN COLON suite\n        \n        funcname : identifier\n        \n        return_stmt : RETURN expression_list\n        \n        suite : stmt_list NEWLINE\n              | NEWLINE INDENT statements DEDENT\n        \n        u_expr : primary\n               | MINUS primary %prec UMINUS\n        \n        empty :\n        '
    
_lr_action_items = {'IF':([0,3,5,7,8,9,23,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,48,50,51,52,75,85,90,94,98,99,106,107,108,111,114,120,121,126,127,134,135,136,],[13,13,-5,-10,-11,-12,64,-20,-39,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-4,-79,-39,-20,-62,-80,-29,-59,-30,-61,-64,-69,-31,-71,-73,-36,-40,-77,13,-72,-78,-74,]),'WHILE':([0,3,5,7,8,9,48,111,114,126,127,134,135,136,],[15,15,-5,-10,-11,-12,-4,-71,-73,-77,15,-72,-78,-74,]),'DEF':([0,3,5,7,8,9,48,111,114,126,127,134,135,136,],[16,16,-5,-10,-11,-12,-4,-71,-73,-77,16,-72,-78,-74,]),'RETURN':([0,3,5,7,8,9,48,86,87,111,114,126,127,131,133,134,135,136,],[19,19,-5,-10,-11,-12,-4,19,19,-71,-73,-77,19,19,19,-72,-78,-74,]),'LAMBDA':([0,3,5,7,8,9,13,15,17,19,26,45,48,53,54,60,73,74,86,87,92,95,109,110,111,114,122,126,127,131,133,134,135,136,],[24,24,-5,-10,-11,-12,24,24,24,24,24,24,-4,24,24,24,24,24,24,24,24,24,24,24,-71,-73,24,-77,24,24,24,-72,-78,-74,]),'identifier':([0,3,5,7,8,9,13,15,16,17,19,24,26,33,45,46,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,88,92,95,96,109,110,111,114,117,122,126,127,131,133,134,135,136,],[25,25,-5,-10,-11,-12,52,52,57,25,52,69,25,52,52,52,-4,52,52,52,52,52,52,52,52,52,-66,-67,-68,52,25,25,69,52,52,69,52,52,-71,-73,52,52,-77,25,25,25,-72,-78,-74,]),'LPAREN':([0,3,5,7,8,9,13,15,17,19,25,26,27,29,31,32,33,35,36,38,39,40,41,42,43,45,46,48,50,51,52,53,54,56,57,60,64,65,72,73,74,76,77,78,79,80,85,86,87,90,92,95,98,108,109,110,111,114,117,120,121,122,126,127,131,133,134,135,136,],[17,17,-5,-10,-11,-12,53,53,17,53,-20,17,-39,74,-37,-38,53,-21,-22,-23,-24,-25,-26,-27,-28,53,53,-4,74,-39,-20,53,53,88,-75,53,53,53,53,53,53,53,-66,-67,-68,53,74,17,17,-29,53,53,-30,-31,53,53,-71,-73,53,-36,-40,53,-77,17,17,17,-72,-78,-74,]),'LBRACKET':([0,3,5,7,8,9,13,15,17,19,25,26,27,29,31,32,33,35,36,38,39,40,41,42,43,45,46,48,50,51,52,53,54,60,64,65,72,73,74,76,77,78,79,80,85,86,87,90,92,95,98,108,109,110,111,114,117,120,121,122,126,127,131,133,134,135,136,],[26,26,-5,-10,-11,-12,54,54,26,54,-20,26,-39,73,-37,-38,54,-21,-22,-23,-24,-25,-26,-27,-28,54,54,-4,73,-39,-20,54,54,54,54,54,54,54,54,54,-66,-67,-68,54,73,26,26,-29,54,54,-30,-31,54,54,-71,-73,54,-36,-40,54,-77,26,26,26,-72,-78,-74,]),'NOT':([0,3,5,7,8,9,13,15,17,19,26,33,45,48,53,54,60,64,65,72,73,74,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[33,33,-5,-10,-11,-12,33,33,33,33,33,33,33,-4,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-71,-73,33,33,-77,33,33,33,-72,-78,-74,]),'integer':([0,3,5,7,8,9,13,15,17,19,26,33,45,46,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[38,38,-5,-10,-11,-12,38,38,38,38,38,38,38,38,-4,38,38,38,38,38,38,38,38,38,-66,-67,-68,38,38,38,38,38,38,38,-71,-73,38,38,-77,38,38,38,-72,-78,-74,]),'TRUE':([0,3,5,7,8,9,13,15,17,19,26,33,45,46,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[39,39,-5,-10,-11,-12,39,39,39,39,39,39,39,39,-4,39,39,39,39,39,39,39,39,39,-66,-67,-68,39,39,39,39,39,39,39,-71,-73,39,39,-77,39,39,39,-72,-78,-74,]),'FALSE':([0,3,5,7,8,9,13,15,17,19,26,33,45,46,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[40,40,-5,-10,-11,-12,40,40,40,40,40,40,40,40,-4,40,40,40,40,40,40,40,40,40,-66,-67,-68,40,40,40,40,40,40,40,-71,-73,40,40,-77,40,40,40,-72,-78,-74,]),'LBRACE':([0,3,5,7,8,9,13,15,17,19,26,33,45,46,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[45,45,-5,-10,-11,-12,45,45,45,45,45,45,45,45,-4,45,45,45,45,45,45,45,45,45,-66,-67,-68,45,45,45,45,45,45,45,-71,-73,45,45,-77,45,45,45,-72,-78,-74,]),'MINUS':([0,3,5,7,8,9,13,15,17,19,26,33,45,48,53,54,60,64,65,72,73,74,76,77,78,79,80,86,87,92,95,109,110,111,114,117,122,126,127,131,133,134,135,136,],[46,46,-5,-10,-11,-12,46,46,46,46,46,46,46,-4,46,46,46,46,46,46,46,46,46,-66,-67,-68,46,46,46,46,46,46,46,-71,-73,46,46,-77,46,46,46,-72,-78,-74,]),'$end':([1,2,3,5,7,8,9,47,48,111,114,126,134,135,136,],[0,-1,-3,-5,-10,-11,-12,-2,-4,-71,-73,-77,-72,-78,-74,]),'DEDENT':([3,5,7,8,9,47,48,111,114,126,132,134,135,136,],[-3,-5,-10,-11,-12,-2,-4,-71,-73,-77,135,-72,-78,-74,]),'NEWLINE':([4,6,10,11,12,14,19,20,21,23,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,61,62,63,75,85,86,87,90,91,94,98,99,106,107,108,112,116,118,120,121,129,131,133,],[48,-6,-7,-8,-9,-13,-81,-49,-50,-51,-20,-39,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-76,-47,-48,-62,-80,113,113,-29,-14,-59,-30,-61,-64,-69,-31,126,-46,-53,-36,-40,-52,113,113,]),'ASSIGN':([18,22,25,27,89,97,120,],[60,-15,-16,-19,-17,-18,-36,]),'COMMA':([19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,50,51,52,54,61,62,63,66,67,68,69,71,73,74,75,81,82,83,85,88,90,94,98,99,100,102,103,104,105,106,107,108,115,116,118,119,120,121,123,124,129,130,],[-81,-49,-50,-51,-81,-20,-81,-39,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-81,-79,-39,-20,-81,92,-47,-48,96,-55,-56,-57,92,-81,-81,-62,109,-33,-34,-80,-81,-29,-59,-30,-61,92,122,-43,-44,-45,-64,-69,-31,96,-46,-53,-54,-36,-40,-32,-35,-52,-42,]),'COLON':([20,21,23,24,28,30,31,32,34,35,36,37,38,39,40,41,42,43,44,49,50,51,52,55,66,67,68,69,75,84,85,90,94,98,99,106,107,108,118,119,120,121,125,128,129,],[-49,-50,-51,-81,-58,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,86,-79,-39,-20,87,95,-55,-56,-57,-62,110,-80,-29,-59,-30,-61,-64,-69,-31,-53,-54,-36,-40,131,133,-52,]),'RPAREN':([20,21,22,23,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,58,59,67,68,69,74,75,85,88,89,90,94,97,98,99,101,102,103,104,105,106,107,108,115,118,119,120,121,129,130,],[-49,-50,-15,-51,-16,-19,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,89,90,-55,-56,-57,-81,-62,-80,-81,-17,-29,-59,-18,-30,-61,121,-41,-43,-44,-45,-64,-69,-31,128,-53,-54,-36,-40,-52,-42,]),'RBRACKET':([20,21,22,23,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,54,62,63,70,71,73,75,85,89,90,94,97,98,99,100,106,107,108,116,118,120,121,129,],[-49,-50,-15,-51,-16,-81,-19,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-81,-47,-48,97,98,-81,-62,-80,-17,-29,-59,-18,-30,-61,120,-64,-69,-31,-46,-53,-36,-40,-52,]),'RBRACE':([20,21,23,28,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,50,51,52,75,81,82,83,85,90,94,98,99,106,107,108,118,120,121,123,124,129,],[-49,-50,-51,-58,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-81,-79,-39,-20,-62,108,-33,-34,-80,-29,-59,-30,-61,-64,-69,-31,-53,-36,-40,-32,-35,-52,]),'OR':([23,25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,75,85,90,93,94,98,99,106,107,108,120,121,],[65,-20,-39,-58,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-62,-80,-29,65,-59,-30,-61,-64,-69,-31,-36,-40,]),'PLUS':([25,27,29,31,32,35,36,37,38,39,40,41,42,43,44,50,51,52,85,90,98,106,107,108,120,121,],[-20,-39,-79,-37,-38,-21,-22,80,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-80,-29,-30,80,-69,-31,-36,-40,]),'EQ':([25,27,29,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,85,90,98,106,107,108,120,121,],[-20,-39,-79,-37,-38,77,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-80,-29,-30,-64,-69,-31,-36,-40,]),'NE':([25,27,29,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,85,90,98,106,107,108,120,121,],[-20,-39,-79,-37,-38,78,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-80,-29,-30,-64,-69,-31,-36,-40,]),'IS':([25,27,29,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,85,90,98,106,107,108,120,121,],[-20,-39,-79,-37,-38,79,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-80,-29,-30,-64,-69,-31,-36,-40,]),'AND':([25,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,75,85,90,94,98,99,106,107,108,120,121,],[-20,-39,72,-79,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-62,-80,-29,72,-30,-61,-64,-69,-31,-36,-40,]),'ELSE':([28,30,31,32,34,35,36,37,38,39,40,41,42,43,44,50,51,52,75,85,90,93,94,98,99,106,107,108,111,120,121,126,135,],[-58,-60,-37,-38,-63,-21,-22,-65,-23,-24,-25,-26,-27,-28,-70,-79,-39,-20,-62,-80,-29,117,-59,-30,-61,-64,-69,-31,125,-36,-40,-77,-78,]),'INDENT':([113,],[127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,3,127,],[2,47,132,]),'statement':([0,3,127,],[3,3,3,]),'stmt_list':([0,3,86,87,127,131,133,],[4,4,112,112,4,112,112,]),'compound_stmt':([0,3,127,],[5,5,5,]),'simple_stmt':([0,3,86,87,127,131,133,],[6,6,6,6,6,6,6,]),'if_stmt':([0,3,127,],[7,7,7,]),'while_stmt':([0,3,127,],[8,8,8,]),'funcdef':([0,3,127,],[9,9,9,]),'expression_stmt':([0,3,86,87,127,131,133,],[10,10,10,10,10,10,10,]),'assignment_stmt':([0,3,86,87,127,131,133,],[11,11,11,11,11,11,11,]),'return_stmt':([0,3,86,87,127,131,133,],[12,12,12,12,12,12,12,]),'expression':([0,3,13,15,17,19,26,45,53,54,60,73,74,86,87,92,95,109,110,122,127,131,133,],[14,14,49,55,59,62,62,84,59,62,91,62,105,14,14,116,118,84,124,105,14,14,14,]),'target_list':([0,3,17,26,86,87,127,131,133,],[18,18,58,70,18,18,18,18,18,]),'conditional_expression':([0,3,13,15,17,19,26,45,53,54,60,73,74,86,87,92,95,109,110,117,122,127,131,133,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,129,20,20,20,20,]),'lambda_expr':([0,3,13,15,17,19,26,45,53,54,60,73,74,86,87,92,95,109,110,122,127,131,133,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'target':([0,3,17,26,86,87,127,131,133,],[22,22,22,22,22,22,22,22,22,]),'or_test':([0,3,13,15,17,19,26,45,53,54,60,64,73,74,86,87,92,95,109,110,117,122,127,131,133,],[23,23,23,23,23,23,23,23,23,23,23,93,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'subscription':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[27,27,51,51,27,51,27,51,51,51,51,51,51,51,51,51,51,51,51,51,27,27,51,51,51,51,51,51,27,27,27,]),'and_test':([0,3,13,15,17,19,26,45,53,54,60,64,65,73,74,86,87,92,95,109,110,117,122,127,131,133,],[28,28,28,28,28,28,28,28,28,28,28,28,94,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'primary':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[29,29,50,50,29,50,29,50,50,85,50,50,50,50,50,50,50,50,50,50,29,29,50,50,50,50,50,50,29,29,29,]),'not_test':([0,3,13,15,17,19,26,33,45,53,54,60,64,65,72,73,74,86,87,92,95,109,110,117,122,127,131,133,],[30,30,30,30,30,30,30,75,30,30,30,30,30,30,99,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'atom':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'call':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'comparison':([0,3,13,15,17,19,26,33,45,53,54,60,64,65,72,73,74,86,87,92,95,109,110,117,122,127,131,133,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'literal':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'enclosure':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'a_expr':([0,3,13,15,17,19,26,33,45,53,54,60,64,65,72,73,74,76,86,87,92,95,109,110,117,122,127,131,133,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,106,37,37,37,37,37,37,37,37,37,37,37,]),'parenth_form':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'list_display':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'dict_display':([0,3,13,15,17,19,26,33,45,46,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'u_expr':([0,3,13,15,17,19,26,33,45,53,54,60,64,65,72,73,74,76,80,86,87,92,95,109,110,117,122,127,131,133,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,107,44,44,44,44,44,44,44,44,44,44,44,]),'funcname':([16,],[56,]),'expression_list':([19,26,54,73,],[61,71,71,100,]),'empty':([19,24,26,45,54,73,74,88,],[63,68,63,83,63,63,104,68,]),'parameter_list':([24,88,],[66,115,]),'parameter':([24,88,96,],[67,67,119,]),'comp_operator':([34,],[76,]),'key_datum_list':([45,],[81,]),'key_datum':([45,109,],[82,123,]),'argument_list':([74,],[101,]),'positional_arguments':([74,],[102,]),'positional_item':([74,122,],[103,130,]),'suite':([86,87,131,133,],[111,114,134,136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','p0.py',194),
  ('statements -> statement statements','statements',2,'p_statements','p0.py',201),
  ('statements -> statement','statements',1,'p_statements','p0.py',202),
  ('statement -> stmt_list NEWLINE','statement',2,'p_statement','p0.py',212),
  ('statement -> compound_stmt','statement',1,'p_statement','p0.py',213),
  ('stmt_list -> simple_stmt','stmt_list',1,'p_stmt_list','p0.py',222),
  ('simple_stmt -> expression_stmt','simple_stmt',1,'p_simple_stmt','p0.py',229),
  ('simple_stmt -> assignment_stmt','simple_stmt',1,'p_simple_stmt','p0.py',230),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','p0.py',231),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','p0.py',238),
  ('compound_stmt -> while_stmt','compound_stmt',1,'p_compound_stmt','p0.py',239),
  ('compound_stmt -> funcdef','compound_stmt',1,'p_compound_stmt','p0.py',240),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','p0.py',247),
  ('assignment_stmt -> target_list ASSIGN expression','assignment_stmt',3,'p_assignment_stmt','p0.py',255),
  ('target_list -> target','target_list',1,'p_target_list','p0.py',262),
  ('target -> identifier','target',1,'p_target','p0.py',269),
  ('target -> LPAREN target_list RPAREN','target',3,'p_target','p0.py',270),
  ('target -> LBRACKET target_list RBRACKET','target',3,'p_target','p0.py',271),
  ('target -> subscription','target',1,'p_target','p0.py',272),
  ('atom -> identifier','atom',1,'p_atom','p0.py',282),
  ('atom -> literal','atom',1,'p_atom','p0.py',283),
  ('atom -> enclosure','atom',1,'p_atom','p0.py',284),
  ('literal -> integer','literal',1,'p_literal','p0.py',294),
  ('literal -> TRUE','literal',1,'p_literal','p0.py',295),
  ('literal -> FALSE','literal',1,'p_literal','p0.py',296),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','p0.py',303),
  ('enclosure -> list_display','enclosure',1,'p_enclosure','p0.py',304),
  ('enclosure -> dict_display','enclosure',1,'p_enclosure','p0.py',305),
  ('parenth_form -> LPAREN expression RPAREN','parenth_form',3,'p_parenth_form','p0.py',312),
  ('list_display -> LBRACKET expression_list RBRACKET','list_display',3,'p_list_display','p0.py',319),
  ('dict_display -> LBRACE key_datum_list RBRACE','dict_display',3,'p_dict_display','p0.py',326),
  ('key_datum_list -> key_datum_list COMMA key_datum','key_datum_list',3,'p_key_datum_list','p0.py',333),
  ('key_datum_list -> key_datum','key_datum_list',1,'p_key_datum_list','p0.py',334),
  ('key_datum_list -> empty','key_datum_list',1,'p_key_datum_list','p0.py',335),
  ('key_datum -> expression COLON expression','key_datum',3,'p_key_datum','p0.py',351),
  ('subscription -> primary LBRACKET expression_list RBRACKET','subscription',4,'p_subscription','p0.py',359),
  ('primary -> atom','primary',1,'p_primary','p0.py',367),
  ('primary -> call','primary',1,'p_primary','p0.py',368),
  ('primary -> subscription','primary',1,'p_primary','p0.py',369),
  ('call -> primary LPAREN argument_list RPAREN','call',4,'p_call','p0.py',376),
  ('argument_list -> positional_arguments','argument_list',1,'p_argument_list','p0.py',383),
  ('positional_arguments -> positional_arguments COMMA positional_item','positional_arguments',3,'p_positional_arguments','p0.py',390),
  ('positional_arguments -> positional_item','positional_arguments',1,'p_positional_arguments','p0.py',391),
  ('positional_arguments -> empty','positional_arguments',1,'p_positional_arguments','p0.py',392),
  ('positional_item -> expression','positional_item',1,'p_positional_item','p0.py',402),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','p0.py',409),
  ('expression_list -> expression','expression_list',1,'p_expression_list','p0.py',410),
  ('expression_list -> empty','expression_list',1,'p_expression_list','p0.py',411),
  ('expression -> conditional_expression','expression',1,'p_expression','p0.py',421),
  ('expression -> lambda_expr','expression',1,'p_expression','p0.py',422),
  ('conditional_expression -> or_test','conditional_expression',1,'p_conditional_expression','p0.py',429),
  ('conditional_expression -> or_test IF or_test ELSE conditional_expression','conditional_expression',5,'p_conditional_expression','p0.py',430),
  ('lambda_expr -> LAMBDA parameter_list COLON expression','lambda_expr',4,'p_lambda_expr','p0.py',440),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','p0.py',447),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','p0.py',448),
  ('parameter_list -> empty','parameter_list',1,'p_parameter_list','p0.py',449),
  ('parameter -> identifier','parameter',1,'p_parameter','p0.py',458),
  ('or_test -> and_test','or_test',1,'p_or_test','p0.py',465),
  ('or_test -> or_test OR and_test','or_test',3,'p_or_test','p0.py',466),
  ('and_test -> not_test','and_test',1,'p_and_test','p0.py',476),
  ('and_test -> and_test AND not_test','and_test',3,'p_and_test','p0.py',477),
  ('not_test -> NOT not_test','not_test',2,'p_not_test','p0.py',487),
  ('not_test -> comparison','not_test',1,'p_not_test','p0.py',488),
  ('comparison -> comparison comp_operator a_expr','comparison',3,'p_comparison','p0.py',498),
  ('comparison -> a_expr','comparison',1,'p_comparison','p0.py',499),
  ('comp_operator -> EQ','comp_operator',1,'p_comp_operator','p0.py',509),
  ('comp_operator -> NE','comp_operator',1,'p_comp_operator','p0.py',510),
  ('comp_operator -> IS','comp_operator',1,'p_comp_operator','p0.py',511),
  ('a_expr -> a_expr PLUS u_expr','a_expr',3,'p_a_expr','p0.py',518),
  ('a_expr -> u_expr','a_expr',1,'p_a_expr','p0.py',519),
  ('if_stmt -> IF expression COLON suite','if_stmt',4,'p_if_stmt','p0.py',529),
  ('if_stmt -> IF expression COLON suite ELSE COLON suite','if_stmt',7,'p_if_stmt','p0.py',530),
  ('while_stmt -> WHILE expression COLON suite','while_stmt',4,'p_while_stmt','p0.py',540),
  ('funcdef -> DEF funcname LPAREN parameter_list RPAREN COLON suite','funcdef',7,'p_funcdef','p0.py',547),
  ('funcname -> identifier','funcname',1,'p_funcname','p0.py',554),
  ('return_stmt -> RETURN expression_list','return_stmt',2,'p_return_stmt','p0.py',561),
  ('suite -> stmt_list NEWLINE','suite',2,'p_suite','p0.py',568),
  ('suite -> NEWLINE INDENT statements DEDENT','suite',4,'p_suite','p0.py',569),
  ('u_expr -> primary','u_expr',1,'p_u_expr','p0.py',579),
  ('u_expr -> MINUS primary','u_expr',2,'p_u_expr','p0.py',580),
  ('empty -> <empty>','empty',0,'p_empty','p0.py',590),
]
