
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTrightEQUALSleftPLUSMINUSrightUMINUSAND ASSIGN CLASS COLON COMMA DEDENT DEF ELSE ENDMARKER EQ EQUALS FALSE IF INDENT IS LAMBDA LBRACE LBRACKET LPAREN MINUS NEWLINE NOT NOT_EQ OR PLUS RBRACE RBRACKET RETURN RPAREN SEMICOLON TRUE WHILE WHITESPACE identifier integer\n        module : statements\n        \n        statements : statement statements\n                   | statement\n        \n        statement : stmt_list NEWLINE\n        \n        stmt_list : simple_stmt\n        \n        simple_stmt : expression_stmt\n                    | assignment_stmt\n        \n        expression_stmt : expression\n        \n        assignment_stmt : target_list ASSIGN expression\n        \n        target_list : target\n        \n        target : identifier\n               | LPAREN target_list RPAREN\n        \n        atom : identifier\n             | literal\n             | enclosure\n        \n        literal : integer\n                | TRUE\n                | FALSE\n        \n        enclosure : parenth_form\n        \n        parenth_form : LPAREN expression RPAREN\n        \n        primary : atom\n                | call\n        \n        call : primary LPAREN argument_list RPAREN\n        \n        argument_list : positional_arguments\n        \n        positional_arguments : positional_arguments COMMA positional_item\n                             | positional_item\n                             | empty\n        \n        positional_item : expression\n        \n        expression : conditional_expression\n        \n        conditional_expression : or_test\n        \n        or_test : a_expr\n        \n        a_expr : a_expr PLUS u_expr\n               | u_expr\n        \n        u_expr : primary\n               | MINUS primary %prec UMINUS\n        \n        empty :\n        '
    
_lr_action_items = {'identifier':([0,3,14,18,28,29,32,33,36,47,],[13,13,13,35,-4,35,35,35,35,35,]),'LPAREN':([0,3,13,14,17,18,19,20,21,22,23,24,25,26,28,29,32,33,34,35,36,39,46,47,],[14,14,-13,14,33,36,-21,-22,-14,-15,-16,-17,-18,-19,-4,36,36,36,33,-13,36,-20,-23,36,]),'MINUS':([0,3,14,28,29,32,33,36,47,],[18,18,18,-4,18,18,18,18,18,]),'integer':([0,3,14,18,28,29,32,33,36,47,],[23,23,23,23,-4,23,23,23,23,23,]),'TRUE':([0,3,14,18,28,29,32,33,36,47,],[24,24,24,24,-4,24,24,24,24,24,]),'FALSE':([0,3,14,18,28,29,32,33,36,47,],[25,25,25,25,-4,25,25,25,25,25,]),'$end':([1,2,3,27,28,],[0,-1,-3,-2,-4,]),'NEWLINE':([4,5,6,7,8,10,12,13,15,16,17,19,20,21,22,23,24,25,26,34,35,37,39,40,46,],[28,-5,-6,-7,-8,-29,-30,-13,-31,-33,-34,-21,-22,-14,-15,-16,-17,-18,-19,-35,-13,-9,-20,-32,-23,]),'ASSIGN':([9,11,13,38,],[29,-10,-11,-12,]),'RPAREN':([10,11,12,13,15,16,17,19,20,21,22,23,24,25,26,30,31,33,34,35,38,39,40,41,42,43,44,45,46,48,],[-29,-10,-30,-11,-31,-33,-34,-21,-22,-14,-15,-16,-17,-18,-19,38,39,-36,-35,-13,-12,-20,-32,46,-24,-26,-27,-28,-23,-25,]),'COMMA':([10,12,15,16,17,19,20,21,22,23,24,25,26,33,34,35,39,40,42,43,44,45,46,48,],[-29,-30,-31,-33,-34,-21,-22,-14,-15,-16,-17,-18,-19,-36,-35,-13,-20,-32,47,-26,-27,-28,-23,-25,]),'PLUS':([13,15,16,17,19,20,21,22,23,24,25,26,34,35,39,40,46,],[-13,32,-33,-34,-21,-22,-14,-15,-16,-17,-18,-19,-35,-13,-20,-32,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,3,],[2,27,]),'statement':([0,3,],[3,3,]),'stmt_list':([0,3,],[4,4,]),'simple_stmt':([0,3,],[5,5,]),'expression_stmt':([0,3,],[6,6,]),'assignment_stmt':([0,3,],[7,7,]),'expression':([0,3,14,29,33,36,47,],[8,8,31,37,45,31,45,]),'target_list':([0,3,14,],[9,9,30,]),'conditional_expression':([0,3,14,29,33,36,47,],[10,10,10,10,10,10,10,]),'target':([0,3,14,],[11,11,11,]),'or_test':([0,3,14,29,33,36,47,],[12,12,12,12,12,12,12,]),'a_expr':([0,3,14,29,33,36,47,],[15,15,15,15,15,15,15,]),'u_expr':([0,3,14,29,32,33,36,47,],[16,16,16,16,40,16,16,16,]),'primary':([0,3,14,18,29,32,33,36,47,],[17,17,17,34,17,17,17,17,17,]),'atom':([0,3,14,18,29,32,33,36,47,],[19,19,19,19,19,19,19,19,19,]),'call':([0,3,14,18,29,32,33,36,47,],[20,20,20,20,20,20,20,20,20,]),'literal':([0,3,14,18,29,32,33,36,47,],[21,21,21,21,21,21,21,21,21,]),'enclosure':([0,3,14,18,29,32,33,36,47,],[22,22,22,22,22,22,22,22,22,]),'parenth_form':([0,3,14,18,29,32,33,36,47,],[26,26,26,26,26,26,26,26,26,]),'argument_list':([33,],[41,]),'positional_arguments':([33,],[42,]),'positional_item':([33,47,],[43,48,]),'empty':([33,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','p0.py',189),
  ('statements -> statement statements','statements',2,'p_statements','p0.py',196),
  ('statements -> statement','statements',1,'p_statements','p0.py',197),
  ('statement -> stmt_list NEWLINE','statement',2,'p_statement','p0.py',207),
  ('stmt_list -> simple_stmt','stmt_list',1,'p_stmt_list','p0.py',216),
  ('simple_stmt -> expression_stmt','simple_stmt',1,'p_simple_stmt','p0.py',223),
  ('simple_stmt -> assignment_stmt','simple_stmt',1,'p_simple_stmt','p0.py',224),
  ('expression_stmt -> expression','expression_stmt',1,'p_expression_stmt','p0.py',231),
  ('assignment_stmt -> target_list ASSIGN expression','assignment_stmt',3,'p_assignment_stmt','p0.py',239),
  ('target_list -> target','target_list',1,'p_target_list','p0.py',246),
  ('target -> identifier','target',1,'p_target','p0.py',253),
  ('target -> LPAREN target_list RPAREN','target',3,'p_target','p0.py',254),
  ('atom -> identifier','atom',1,'p_atom','p0.py',264),
  ('atom -> literal','atom',1,'p_atom','p0.py',265),
  ('atom -> enclosure','atom',1,'p_atom','p0.py',266),
  ('literal -> integer','literal',1,'p_literal','p0.py',276),
  ('literal -> TRUE','literal',1,'p_literal','p0.py',277),
  ('literal -> FALSE','literal',1,'p_literal','p0.py',278),
  ('enclosure -> parenth_form','enclosure',1,'p_enclosure','p0.py',285),
  ('parenth_form -> LPAREN expression RPAREN','parenth_form',3,'p_parenth_form','p0.py',292),
  ('primary -> atom','primary',1,'p_primary','p0.py',299),
  ('primary -> call','primary',1,'p_primary','p0.py',300),
  ('call -> primary LPAREN argument_list RPAREN','call',4,'p_call','p0.py',307),
  ('argument_list -> positional_arguments','argument_list',1,'p_argument_list','p0.py',314),
  ('positional_arguments -> positional_arguments COMMA positional_item','positional_arguments',3,'p_positional_arguments','p0.py',321),
  ('positional_arguments -> positional_item','positional_arguments',1,'p_positional_arguments','p0.py',322),
  ('positional_arguments -> empty','positional_arguments',1,'p_positional_arguments','p0.py',323),
  ('positional_item -> expression','positional_item',1,'p_positional_item','p0.py',333),
  ('expression -> conditional_expression','expression',1,'p_expression','p0.py',340),
  ('conditional_expression -> or_test','conditional_expression',1,'p_conditional_expression','p0.py',347),
  ('or_test -> a_expr','or_test',1,'p_or_test','p0.py',354),
  ('a_expr -> a_expr PLUS u_expr','a_expr',3,'p_a_expr','p0.py',361),
  ('a_expr -> u_expr','a_expr',1,'p_a_expr','p0.py',362),
  ('u_expr -> primary','u_expr',1,'p_u_expr','p0.py',372),
  ('u_expr -> MINUS primary','u_expr',2,'p_u_expr','p0.py',373),
  ('empty -> <empty>','empty',0,'p_empty','p0.py',383),
]
