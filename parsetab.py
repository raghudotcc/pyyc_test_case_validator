
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'moduleleftPLUSMINUSrightUMINUSCOMMA EQUALS INT LPAREN MINUS NAME NEWLINE PLUS RPAREN\n        module : statements\n        \n        statements : statement statements\n                    | statement\n                    | empty\n        \n        statement : simple_statements\n        \n        simple_statements : simple_statement\n                            | simple_statements NEWLINE simple_statement\n        \n        simple_statement : assignment\n                        | d_expression\n        \n        assignment : NAME EQUALS expression\n        \n        d_expression : expression \n        \n        expression : binary_expression\n                    | unary_expression\n                    | call_expression\n                    | LPAREN expression RPAREN\n                    | atom\n        \n        binary_expression : expression PLUS expression\n        \n        unary_expression : MINUS expression %prec UMINUS\n        \n        call_expression : NAME LPAREN arguments RPAREN\n        \n        arguments : args\n                    | empty\n        \n        args : arg\n             | args COMMA arg\n        \n        arg : expression\n        \n        atom : INT\n             | NAME\n        \n        empty :\n        '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,17,18,24,25,26,27,33,34,35,],[-27,0,-1,-3,-4,-5,-6,-8,-9,-26,-11,-12,-13,-14,-16,-25,-2,-26,-18,-7,-10,-17,-15,-19,]),'NAME':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,33,34,35,36,],[9,9,-5,-6,-8,-9,-26,-11,-12,-13,-14,24,-16,24,-25,9,24,24,24,-26,-18,-7,-10,-17,-15,-19,24,]),'LPAREN':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,33,34,35,36,],[14,14,-5,-6,-8,-9,21,-11,-12,-13,-14,14,-16,14,-25,14,14,14,14,21,-18,-7,-10,-17,-15,-19,14,]),'MINUS':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,33,34,35,36,],[16,16,-5,-6,-8,-9,-26,-11,-12,-13,-14,16,-16,16,-25,16,16,16,16,-26,-18,-7,-10,-17,-15,-19,16,]),'INT':([0,3,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,21,22,24,25,26,27,33,34,35,36,],[17,17,-5,-6,-8,-9,-26,-11,-12,-13,-14,17,-16,17,-25,17,17,17,17,-26,-18,-7,-10,-17,-15,-19,17,]),'NEWLINE':([5,6,7,8,9,10,11,12,13,15,17,24,25,26,27,33,34,35,],[19,-6,-8,-9,-26,-11,-12,-13,-14,-16,-25,-26,-18,-7,-10,-17,-15,-19,]),'EQUALS':([9,],[20,]),'PLUS':([9,10,11,12,13,15,17,23,24,25,27,32,33,34,35,],[-26,22,-12,-13,-14,-16,-25,22,-26,-18,22,22,-17,-15,-19,]),'RPAREN':([11,12,13,15,17,21,23,24,25,28,29,30,31,32,33,34,35,37,],[-12,-13,-14,-16,-25,-27,34,-26,-18,35,-20,-21,-22,-24,-17,-15,-19,-23,]),'COMMA':([11,12,13,15,17,24,25,29,31,32,33,34,35,37,],[-12,-13,-14,-16,-25,-26,-18,36,-22,-24,-17,-15,-19,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'module':([0,],[1,]),'statements':([0,3,],[2,18,]),'statement':([0,3,],[3,3,]),'empty':([0,3,21,],[4,4,30,]),'simple_statements':([0,3,],[5,5,]),'simple_statement':([0,3,19,],[6,6,26,]),'assignment':([0,3,19,],[7,7,7,]),'d_expression':([0,3,19,],[8,8,8,]),'expression':([0,3,14,16,19,20,21,22,36,],[10,10,23,25,10,27,32,33,32,]),'binary_expression':([0,3,14,16,19,20,21,22,36,],[11,11,11,11,11,11,11,11,11,]),'unary_expression':([0,3,14,16,19,20,21,22,36,],[12,12,12,12,12,12,12,12,12,]),'call_expression':([0,3,14,16,19,20,21,22,36,],[13,13,13,13,13,13,13,13,13,]),'atom':([0,3,14,16,19,20,21,22,36,],[15,15,15,15,15,15,15,15,15,]),'arguments':([21,],[28,]),'args':([21,],[29,]),'arg':([21,36,],[31,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> statements','module',1,'p_module','p0.py',85),
  ('statements -> statement statements','statements',2,'p_statements','p0.py',92),
  ('statements -> statement','statements',1,'p_statements','p0.py',93),
  ('statements -> empty','statements',1,'p_statements','p0.py',94),
  ('statement -> simple_statements','statement',1,'p_statement','p0.py',103),
  ('simple_statements -> simple_statement','simple_statements',1,'p_simple_statements','p0.py',109),
  ('simple_statements -> simple_statements NEWLINE simple_statement','simple_statements',3,'p_simple_statements','p0.py',110),
  ('simple_statement -> assignment','simple_statement',1,'p_simple_statement','p0.py',119),
  ('simple_statement -> d_expression','simple_statement',1,'p_simple_statement','p0.py',120),
  ('assignment -> NAME EQUALS expression','assignment',3,'p_assignment','p0.py',126),
  ('d_expression -> expression','d_expression',1,'p_d_expression','p0.py',132),
  ('expression -> binary_expression','expression',1,'p_expression','p0.py',138),
  ('expression -> unary_expression','expression',1,'p_expression','p0.py',139),
  ('expression -> call_expression','expression',1,'p_expression','p0.py',140),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','p0.py',141),
  ('expression -> atom','expression',1,'p_expression','p0.py',142),
  ('binary_expression -> expression PLUS expression','binary_expression',3,'p_binary_expression','p0.py',151),
  ('unary_expression -> MINUS expression','unary_expression',2,'p_unary_expression','p0.py',157),
  ('call_expression -> NAME LPAREN arguments RPAREN','call_expression',4,'p_call_expression','p0.py',163),
  ('arguments -> args','arguments',1,'p_arguments','p0.py',170),
  ('arguments -> empty','arguments',1,'p_arguments','p0.py',171),
  ('args -> arg','args',1,'p_args','p0.py',180),
  ('args -> args COMMA arg','args',3,'p_args','p0.py',181),
  ('arg -> expression','arg',1,'p_arg','p0.py',190),
  ('atom -> INT','atom',1,'p_atom','p0.py',196),
  ('atom -> NAME','atom',1,'p_atom','p0.py',197),
  ('empty -> <empty>','empty',0,'p_empty','p0.py',206),
]
